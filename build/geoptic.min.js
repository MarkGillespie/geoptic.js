!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("https://unpkg.com/three@0.125.1/build/three.module.js"),require("https://unpkg.com/three@0.125.1/examples/jsm/controls/TrackballControls.js"),require("https://unpkg.com/three@0.125.1/examples/jsm/WebGL.js"),require("https://unpkg.com/three@0.125.1/examples/jsm/objects/Reflector.js"),require("https://unpkg.com/three@0.125.1/examples/jsm/loaders/RGBELoader.js"),require("https://unpkg.com/three@0.125.1/examples/jsm/libs/stats.module.js"),require("https://unpkg.com/dat.gui@0.7.6/build/dat.gui.module.js")):"function"==typeof define&&define.amd?define(["exports","https://unpkg.com/three@0.125.1/build/three.module.js","https://unpkg.com/three@0.125.1/examples/jsm/controls/TrackballControls.js","https://unpkg.com/three@0.125.1/examples/jsm/WebGL.js","https://unpkg.com/three@0.125.1/examples/jsm/objects/Reflector.js","https://unpkg.com/three@0.125.1/examples/jsm/loaders/RGBELoader.js","https://unpkg.com/three@0.125.1/examples/jsm/libs/stats.module.js","https://unpkg.com/dat.gui@0.7.6/build/dat.gui.module.js"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).geoptic={},e.THREE,e.TrackballControls_js,e.WebGL_js,e.Reflector_js,null,e.Stats,e.dat_gui_module_js)}(this,(function(e,t,i,a,n,s,r,o){"use strict";function d(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var l=d(r);let c="\n        float getEdgeFactor(vec3 UVW, vec3 edgeReal, float width) {\n\n            // The Nick Sharp Edge Function (tm). There are many like it, but this one is his.\n            float slopeWidth = 1.;\n\n            vec3 fw = fwidth(UVW);\n            vec3 realUVW = max(UVW, 1. - edgeReal.yzx);\n            vec3 baryWidth = slopeWidth * fw;\n\n            vec3 end = width * fw;\n            vec3 dist = smoothstep(end - baryWidth, end, realUVW);\n\n            float e = 1.0 - min(min(dist.x, dist.y), dist.z);\n            return e;\n        }\n";function h(e,i,a,n){let s=`\n        uniform sampler2D Matcap_r; // Matcap texture\n        uniform sampler2D Matcap_g; // Matcap texture\n        uniform sampler2D Matcap_b; // Matcap texture\n        uniform sampler2D Matcap_k; // Matcap texture\n        uniform vec3 color;\n\n        varying vec2 Point;\n\n        ${c}\n\n        void main(void){\n\n            vec2 coord = Point;\n\n            vec4 mat_r = sRGBToLinear(texture2D(Matcap_r, coord));\n            vec4 mat_g = sRGBToLinear(texture2D(Matcap_g, coord));\n            vec4 mat_b = sRGBToLinear(texture2D(Matcap_b, coord));\n            vec4 mat_k = sRGBToLinear(texture2D(Matcap_k, coord));\n\n            vec4 colorCombined = color.r * mat_r + color.g * mat_g + color.b * mat_b +\n                                (1. - color.r - color.g - color.b) * mat_k;\n\n            gl_FragColor = colorCombined;\n            gl_FragColor = LinearTosRGB( gl_FragColor );\n        }\n    `,r=new t.ShaderMaterial({uniforms:{Matcap_r:{value:e},Matcap_g:{value:i},Matcap_b:{value:a},Matcap_k:{value:n},color:{value:new t.Vector3(1,0,1)},scale:{value:1}},vertexShader:"\n        uniform float scale;\n        varying vec2 Point;\n\n        void main()\n        {\n            vec3 vNormal = (modelViewMatrix * instanceMatrix * vec4(normal, 0.)).xyz;\n            vNormal = normalize(vNormal);\n\n            // pull slightly inward, to reduce sampling artifacts near edges\n            Point.x = 0.93 * vNormal.x * 0.5 + 0.5;\n            Point.y = 0.93 * vNormal.y * 0.5 + 0.5;\n\n            gl_Position = projectionMatrix * modelViewMatrix * instanceMatrix * vec4( scale * position, 1.0 );\n\n        }\n    ",fragmentShader:s});return r.side=t.DoubleSide,r}function u(e,i,a,n){let s=`\n        uniform sampler2D Matcap_r; // Matcap texture\n        uniform sampler2D Matcap_g; // Matcap texture\n        uniform sampler2D Matcap_b; // Matcap texture\n        uniform sampler2D Matcap_k; // Matcap texture\n\n        varying vec3 Color;\n        varying vec2 Point;\n\n        ${c}\n\n        void main(void){\n\n            vec2 coord = Point;\n\n            vec4 mat_r = sRGBToLinear(texture2D(Matcap_r, coord));\n            vec4 mat_g = sRGBToLinear(texture2D(Matcap_g, coord));\n            vec4 mat_b = sRGBToLinear(texture2D(Matcap_b, coord));\n            vec4 mat_k = sRGBToLinear(texture2D(Matcap_k, coord));\n\n            vec4 colorCombined = Color.r * mat_r + Color.g * mat_g + Color.b * mat_b +\n                                (1. - Color.r - Color.g - Color.b) * mat_k;\n\n            gl_FragColor = colorCombined;\n            gl_FragColor = LinearTosRGB( gl_FragColor );\n        }\n    `,r=new t.ShaderMaterial({uniforms:{Matcap_r:{value:e},Matcap_g:{value:i},Matcap_b:{value:a},Matcap_k:{value:n},scale:{value:1}},vertexShader:"\n        uniform float scale;\n        attribute vec3 color;\n\n        varying vec3 Color;\n        varying vec2 Point;\n\n        void main()\n        {\n            vec3 vNormal = (modelViewMatrix * instanceMatrix * vec4(normal, 0.)).xyz;\n            vNormal = normalize(vNormal);\n\n            // pull slightly inward, to reduce sampling artifacts near edges\n            Point.x = 0.93 * vNormal.x * 0.5 + 0.5;\n            Point.y = 0.93 * vNormal.y * 0.5 + 0.5;\n\n            Color = color;\n\n            gl_Position = projectionMatrix * modelViewMatrix * instanceMatrix * vec4( scale * position, 1.0 );\n\n        }\n    ",fragmentShader:s});return r.side=t.DoubleSide,r}let m=1,f=[];function p(e,t){let i=m,a=m+t;return f.push({start:i,end:a,structure:e}),m=a,i}function g(e,i,a,n,s,r,o){let d=new t.WebGLRenderTarget(r,o);d.texture.generateMipmaps=!1,e.setRenderTarget(d),e.render(i,a);let l=new Uint8Array(4);return e.readRenderTargetPixels(d,n,d.height-s,1,1,l),function(e){for(let t of f)if(e>=t.start&&e<t.end)return{localInd:e-t.start,structure:t.structure};return{localInd:0,structure:void 0}}(l[0]+256*l[1]+256*l[2]*256)}function b(e){return[((255&e)>>0)/255,((65280&e)>>8)/255,((16711680&e)>>16)/255]}function v(e,t){if(t<0)return 0;let i=0,a=.5;for(;t>0;)t%2==1&&(i+=a),t/=2,a/=2;return i=(i+e)%1,n=i,Math.max(0,Math.min(1,n));var n}function x(e,t){return function(e,t,i){let a,n,s,r=Math.floor(6*e),o=6*e-r,d=i*(1-t),l=i*(1-o*t),c=i*(1-(1-o)*t);switch(r%6){case 0:a=i,n=c,s=d;break;case 1:a=l,n=i,s=d;break;case 2:a=d,n=i,s=c;break;case 3:a=d,n=l,s=i;break;case 4:a=c,n=d,s=i;break;case 5:a=i,n=d,s=l}return[255*a,255*n,255*s]}(v(e[0],t),e[1],e[2])}let C=[219/360,.88,.89],M=0;function y(){return x(C,M++)}let w={viridis:["#440154","#440256","#450457","#450559","#46075a","#46085c","#460a5d","#460b5e","#470d60","#470e61","#471063","#471164","#471365","#481467","#481668","#481769","#48186a","#481a6c","#481b6d","#481c6e","#481d6f","#481f70","#482071","#482173","#482374","#482475","#482576","#482677","#482878","#482979","#472a7a","#472c7a","#472d7b","#472e7c","#472f7d","#46307e","#46327e","#46337f","#463480","#453581","#453781","#453882","#443983","#443a83","#443b84","#433d84","#433e85","#423f85","#424086","#424186","#414287","#414487","#404588","#404688","#3f4788","#3f4889","#3e4989","#3e4a89","#3e4c8a","#3d4d8a","#3d4e8a","#3c4f8a","#3c508b","#3b518b","#3b528b","#3a538b","#3a548c","#39558c","#39568c","#38588c","#38598c","#375a8c","#375b8d","#365c8d","#365d8d","#355e8d","#355f8d","#34608d","#34618d","#33628d","#33638d","#32648e","#32658e","#31668e","#31678e","#31688e","#30698e","#306a8e","#2f6b8e","#2f6c8e","#2e6d8e","#2e6e8e","#2e6f8e","#2d708e","#2d718e","#2c718e","#2c728e","#2c738e","#2b748e","#2b758e","#2a768e","#2a778e","#2a788e","#29798e","#297a8e","#297b8e","#287c8e","#287d8e","#277e8e","#277f8e","#27808e","#26818e","#26828e","#26828e","#25838e","#25848e","#25858e","#24868e","#24878e","#23888e","#23898e","#238a8d","#228b8d","#228c8d","#228d8d","#218e8d","#218f8d","#21908d","#21918c","#20928c","#20928c","#20938c","#1f948c","#1f958b","#1f968b","#1f978b","#1f988b","#1f998a","#1f9a8a","#1e9b8a","#1e9c89","#1e9d89","#1f9e89","#1f9f88","#1fa088","#1fa188","#1fa187","#1fa287","#20a386","#20a486","#21a585","#21a685","#22a785","#22a884","#23a983","#24aa83","#25ab82","#25ac82","#26ad81","#27ad81","#28ae80","#29af7f","#2ab07f","#2cb17e","#2db27d","#2eb37c","#2fb47c","#31b57b","#32b67a","#34b679","#35b779","#37b878","#38b977","#3aba76","#3bbb75","#3dbc74","#3fbc73","#40bd72","#42be71","#44bf70","#46c06f","#48c16e","#4ac16d","#4cc26c","#4ec36b","#50c46a","#52c569","#54c568","#56c667","#58c765","#5ac864","#5cc863","#5ec962","#60ca60","#63cb5f","#65cb5e","#67cc5c","#69cd5b","#6ccd5a","#6ece58","#70cf57","#73d056","#75d054","#77d153","#7ad151","#7cd250","#7fd34e","#81d34d","#84d44b","#86d549","#89d548","#8bd646","#8ed645","#90d743","#93d741","#95d840","#98d83e","#9bd93c","#9dd93b","#a0da39","#a2da37","#a5db36","#a8db34","#aadc32","#addc30","#b0dd2f","#b2dd2d","#b5de2b","#b8de29","#bade28","#bddf26","#c0df25","#c2df23","#c5e021","#c8e020","#cae11f","#cde11d","#d0e11c","#d2e21b","#d5e21a","#d8e219","#dae319","#dde318","#dfe318","#e2e418","#e5e419","#e7e419","#eae51a","#ece51b","#efe51c","#f1e51d","#f4e61e","#f6e620","#f8e621","#fbe723","#fde725"],plasma:["#0d0887","#100788","#130789","#16078a","#19068c","#1b068d","#1d068e","#20068f","#220690","#240691","#260591","#280592","#2a0593","#2c0594","#2e0595","#2f0596","#310597","#330597","#350498","#370499","#38049a","#3a049a","#3c049b","#3e049c","#3f049c","#41049d","#43039e","#44039e","#46039f","#48039f","#4903a0","#4b03a1","#4c02a1","#4e02a2","#5002a2","#5102a3","#5302a3","#5502a4","#5601a4","#5801a4","#5901a5","#5b01a5","#5c01a6","#5e01a6","#6001a6","#6100a7","#6300a7","#6400a7","#6600a7","#6700a8","#6900a8","#6a00a8","#6c00a8","#6e00a8","#6f00a8","#7100a8","#7201a8","#7401a8","#7501a8","#7701a8","#7801a8","#7a02a8","#7b02a8","#7d03a8","#7e03a8","#8004a8","#8104a7","#8305a7","#8405a7","#8606a6","#8707a6","#8808a6","#8a09a5","#8b0aa5","#8d0ba5","#8e0ca4","#8f0da4","#910ea3","#920fa3","#9410a2","#9511a1","#9613a1","#9814a0","#99159f","#9a169f","#9c179e","#9d189d","#9e199d","#a01a9c","#a11b9b","#a21d9a","#a31e9a","#a51f99","#a62098","#a72197","#a82296","#aa2395","#ab2494","#ac2694","#ad2793","#ae2892","#b02991","#b12a90","#b22b8f","#b32c8e","#b42e8d","#b52f8c","#b6308b","#b7318a","#b83289","#ba3388","#bb3488","#bc3587","#bd3786","#be3885","#bf3984","#c03a83","#c13b82","#c23c81","#c33d80","#c43e7f","#c5407e","#c6417d","#c7427c","#c8437b","#c9447a","#ca457a","#cb4679","#cc4778","#cc4977","#cd4a76","#ce4b75","#cf4c74","#d04d73","#d14e72","#d24f71","#d35171","#d45270","#d5536f","#d5546e","#d6556d","#d7566c","#d8576b","#d9586a","#da5a6a","#da5b69","#db5c68","#dc5d67","#dd5e66","#de5f65","#de6164","#df6263","#e06363","#e16462","#e26561","#e26660","#e3685f","#e4695e","#e56a5d","#e56b5d","#e66c5c","#e76e5b","#e76f5a","#e87059","#e97158","#e97257","#ea7457","#eb7556","#eb7655","#ec7754","#ed7953","#ed7a52","#ee7b51","#ef7c51","#ef7e50","#f07f4f","#f0804e","#f1814d","#f1834c","#f2844b","#f3854b","#f3874a","#f48849","#f48948","#f58b47","#f58c46","#f68d45","#f68f44","#f79044","#f79143","#f79342","#f89441","#f89540","#f9973f","#f9983e","#f99a3e","#fa9b3d","#fa9c3c","#fa9e3b","#fb9f3a","#fba139","#fba238","#fca338","#fca537","#fca636","#fca835","#fca934","#fdab33","#fdac33","#fdae32","#fdaf31","#fdb130","#fdb22f","#fdb42f","#fdb52e","#feb72d","#feb82c","#feba2c","#febb2b","#febd2a","#febe2a","#fec029","#fdc229","#fdc328","#fdc527","#fdc627","#fdc827","#fdca26","#fdcb26","#fccd25","#fcce25","#fcd025","#fcd225","#fbd324","#fbd524","#fbd724","#fad824","#fada24","#f9dc24","#f9dd25","#f8df25","#f8e125","#f7e225","#f7e425","#f6e626","#f6e826","#f5e926","#f5eb27","#f4ed27","#f3ee27","#f3f027","#f2f227","#f1f426","#f1f525","#f0f724","#f0f921"],magma:["#000004","#010005","#010106","#010108","#020109","#02020b","#02020d","#03030f","#030312","#040414","#050416","#060518","#06051a","#07061c","#08071e","#090720","#0a0822","#0b0924","#0c0926","#0d0a29","#0e0b2b","#100b2d","#110c2f","#120d31","#130d34","#140e36","#150e38","#160f3b","#180f3d","#19103f","#1a1042","#1c1044","#1d1147","#1e1149","#20114b","#21114e","#221150","#241253","#251255","#271258","#29115a","#2a115c","#2c115f","#2d1161","#2f1163","#311165","#331067","#341069","#36106b","#38106c","#390f6e","#3b0f70","#3d0f71","#3f0f72","#400f74","#420f75","#440f76","#451077","#471078","#491078","#4a1079","#4c117a","#4e117b","#4f127b","#51127c","#52137c","#54137d","#56147d","#57157e","#59157e","#5a167e","#5c167f","#5d177f","#5f187f","#601880","#621980","#641a80","#651a80","#671b80","#681c81","#6a1c81","#6b1d81","#6d1d81","#6e1e81","#701f81","#721f81","#732081","#752181","#762181","#782281","#792282","#7b2382","#7c2382","#7e2482","#802582","#812581","#832681","#842681","#862781","#882781","#892881","#8b2981","#8c2981","#8e2a81","#902a81","#912b81","#932b80","#942c80","#962c80","#982d80","#992d80","#9b2e7f","#9c2e7f","#9e2f7f","#a02f7f","#a1307e","#a3307e","#a5317e","#a6317d","#a8327d","#aa337d","#ab337c","#ad347c","#ae347b","#b0357b","#b2357b","#b3367a","#b5367a","#b73779","#b83779","#ba3878","#bc3978","#bd3977","#bf3a77","#c03a76","#c23b75","#c43c75","#c53c74","#c73d73","#c83e73","#ca3e72","#cc3f71","#cd4071","#cf4070","#d0416f","#d2426f","#d3436e","#d5446d","#d6456c","#d8456c","#d9466b","#db476a","#dc4869","#de4968","#df4a68","#e04c67","#e24d66","#e34e65","#e44f64","#e55064","#e75263","#e85362","#e95462","#ea5661","#eb5760","#ec5860","#ed5a5f","#ee5b5e","#ef5d5e","#f05f5e","#f1605d","#f2625d","#f2645c","#f3655c","#f4675c","#f4695c","#f56b5c","#f66c5c","#f66e5c","#f7705c","#f7725c","#f8745c","#f8765c","#f9785d","#f9795d","#f97b5d","#fa7d5e","#fa7f5e","#fa815f","#fb835f","#fb8560","#fb8761","#fc8961","#fc8a62","#fc8c63","#fc8e64","#fc9065","#fd9266","#fd9467","#fd9668","#fd9869","#fd9a6a","#fd9b6b","#fe9d6c","#fe9f6d","#fea16e","#fea36f","#fea571","#fea772","#fea973","#feaa74","#feac76","#feae77","#feb078","#feb27a","#feb47b","#feb67c","#feb77e","#feb97f","#febb81","#febd82","#febf84","#fec185","#fec287","#fec488","#fec68a","#fec88c","#feca8d","#fecc8f","#fecd90","#fecf92","#fed194","#fed395","#fed597","#fed799","#fed89a","#fdda9c","#fddc9e","#fddea0","#fde0a1","#fde2a3","#fde3a5","#fde5a7","#fde7a9","#fde9aa","#fdebac","#fcecae","#fceeb0","#fcf0b2","#fcf2b4","#fcf4b6","#fcf6b8","#fcf7b9","#fcf9bb","#fcfbbd","#fcfdbf"],inferno:["#000004","#010005","#010106","#010108","#02010a","#02020c","#02020e","#030210","#040312","#040314","#050417","#060419","#07051b","#08051d","#09061f","#0a0722","#0b0724","#0c0826","#0d0829","#0e092b","#10092d","#110a30","#120a32","#140b34","#150b37","#160b39","#180c3c","#190c3e","#1b0c41","#1c0c43","#1e0c45","#1f0c48","#210c4a","#230c4c","#240c4f","#260c51","#280b53","#290b55","#2b0b57","#2d0b59","#2f0a5b","#310a5c","#320a5e","#340a5f","#360961","#380962","#390963","#3b0964","#3d0965","#3e0966","#400a67","#420a68","#440a68","#450a69","#470b6a","#490b6a","#4a0c6b","#4c0c6b","#4d0d6c","#4f0d6c","#510e6c","#520e6d","#540f6d","#550f6d","#57106e","#59106e","#5a116e","#5c126e","#5d126e","#5f136e","#61136e","#62146e","#64156e","#65156e","#67166e","#69166e","#6a176e","#6c186e","#6d186e","#6f196e","#71196e","#721a6e","#741a6e","#751b6e","#771c6d","#781c6d","#7a1d6d","#7c1d6d","#7d1e6d","#7f1e6c","#801f6c","#82206c","#84206b","#85216b","#87216b","#88226a","#8a226a","#8c2369","#8d2369","#8f2469","#902568","#922568","#932667","#952667","#972766","#982766","#9a2865","#9b2964","#9d2964","#9f2a63","#a02a63","#a22b62","#a32c61","#a52c60","#a62d60","#a82e5f","#a92e5e","#ab2f5e","#ad305d","#ae305c","#b0315b","#b1325a","#b3325a","#b43359","#b63458","#b73557","#b93556","#ba3655","#bc3754","#bd3853","#bf3952","#c03a51","#c13a50","#c33b4f","#c43c4e","#c63d4d","#c73e4c","#c83f4b","#ca404a","#cb4149","#cc4248","#ce4347","#cf4446","#d04545","#d24644","#d34743","#d44842","#d54a41","#d74b3f","#d84c3e","#d94d3d","#da4e3c","#db503b","#dd513a","#de5238","#df5337","#e05536","#e15635","#e25734","#e35933","#e45a31","#e55c30","#e65d2f","#e75e2e","#e8602d","#e9612b","#ea632a","#eb6429","#eb6628","#ec6726","#ed6925","#ee6a24","#ef6c23","#ef6e21","#f06f20","#f1711f","#f1731d","#f2741c","#f3761b","#f37819","#f47918","#f57b17","#f57d15","#f67e14","#f68013","#f78212","#f78410","#f8850f","#f8870e","#f8890c","#f98b0b","#f98c0a","#f98e09","#fa9008","#fa9207","#fa9407","#fb9606","#fb9706","#fb9906","#fb9b06","#fb9d07","#fc9f07","#fca108","#fca309","#fca50a","#fca60c","#fca80d","#fcaa0f","#fcac11","#fcae12","#fcb014","#fcb216","#fcb418","#fbb61a","#fbb81d","#fbba1f","#fbbc21","#fbbe23","#fac026","#fac228","#fac42a","#fac62d","#f9c72f","#f9c932","#f9cb35","#f8cd37","#f8cf3a","#f7d13d","#f7d340","#f6d543","#f6d746","#f5d949","#f5db4c","#f4dd4f","#f4df53","#f4e156","#f3e35a","#f3e55d","#f2e661","#f2e865","#f2ea69","#f1ec6d","#f1ed71","#f1ef75","#f1f179","#f2f27d","#f2f482","#f3f586","#f3f68a","#f4f88e","#f5f992","#f6fa96","#f8fb9a","#f9fc9d","#fafda1","#fcffa4"],coolwarm:["#3c4ec2","#9bbcff","#ffffff","#f6a385","#b40426"]};function _(e,i,a,n){let s=w[e],r=(i-a)/(n-a),o=Math.floor(r*(s.length-1)),d=r*(s.length-1)-o,l=new t.Color(s[o]),c=new t.Color(s[o+1]);return l.lerp(c,d)}function E(e){let t=e[0],i=e[0];return e.forEach((e=>{t=Math.min(t,e),i=Math.max(i,e)})),[t,i]}class k{constructor(e,i,a){this.parent=a,this.gp=this.parent.gp,this.values=i,this.name=e,this.enabled=!1,this.isDominantQuantity=!0,[this.dataMin,this.dataMax]=E(i);let n=function(e,i,a,n){let s=`\n        uniform sampler2D Matcap_r; // Matcap texture\n        uniform sampler2D Matcap_g; // Matcap texture\n        uniform sampler2D Matcap_b; // Matcap texture\n        uniform sampler2D Matcap_k; // Matcap texture\n        uniform vec3 edgeColor;\n        uniform float edgeWidth;\n\n        varying vec2 Point;\n        varying vec3 Barycoord;\n        varying vec3 Color;\n\n        ${c}\n\n        void main(void){\n\n\n            float alpha = getEdgeFactor(Barycoord, vec3(1.,1.,1.), edgeWidth);\n            vec2 coord = Point;\n\n            vec4 mat_r = sRGBToLinear(texture2D(Matcap_r, coord));\n            vec4 mat_g = sRGBToLinear(texture2D(Matcap_g, coord));\n            vec4 mat_b = sRGBToLinear(texture2D(Matcap_b, coord));\n            vec4 mat_k = sRGBToLinear(texture2D(Matcap_k, coord));\n\n            vec4 colorCombined = Color.r * mat_r + Color.g * mat_g + Color.b * mat_b +\n                                (1. - Color.r - Color.g - Color.b) * mat_k;\n\n            vec4 edgeColorCombined = edgeColor.r * mat_r + edgeColor.g * mat_g + edgeColor.b * mat_b +\n                                (1. - edgeColor.r - edgeColor.g - edgeColor.b) * mat_k;\n\n            gl_FragColor = (1.-alpha) * colorCombined + alpha * edgeColorCombined;\n            gl_FragColor = LinearTosRGB( gl_FragColor );\n        }\n    `,r=new t.ShaderMaterial({uniforms:{Matcap_r:{value:e},Matcap_g:{value:i},Matcap_b:{value:a},Matcap_k:{value:n},edgeColor:{value:new t.Vector3(0,0,0)},edgeWidth:{value:0}},vertexShader:"\n        attribute vec3 barycoord;\n        attribute vec3 color;\n\n        varying vec2 Point;\n        varying vec3 Barycoord;\n        varying vec3 Color;\n\n        void main()\n        {\n            vec3 vNormal = ( mat3( modelViewMatrix ) * normal );\n            vNormal = normalize(vNormal);\n\n            // pull slightly inward, to reduce sampling artifacts near edges\n            Point.x = 0.93 * vNormal.x * 0.5 + 0.5;\n            Point.y = 0.93 * vNormal.y * 0.5 + 0.5;\n\n            Barycoord = barycoord;\n            Color = color;\n\n            gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n        }\n    ",fragmentShader:s});return r.side=t.DoubleSide,r}(this.gp.matcapTextures.r,this.gp.matcapTextures.g,this.gp.matcapTextures.b,this.gp.matcapTextures.k);this.mesh=new t.Mesh(this.parent.mesh.geometry.clone(),n),this.initializeColorMap(),this.mesh.geometry.attributes.position=this.parent.mesh.geometry.attributes.position,this.mesh.geometry.attributes.normal=this.parent.mesh.geometry.attributes.normal,this.mesh.material.uniforms.edgeWidth=this.parent.mesh.material.uniforms.edgeWidth,this.mesh.material.uniforms.edgeColor=this.parent.mesh.material.uniforms.edgeColor}initGui(e,t){this.prefix=this.parent.name+"#"+this.name,this.guiFields=e,e[this.prefix+"#Enabled"]=!1,t.add(e,this.prefix+"#Enabled").onChange((e=>{this.setEnabled(e)})).listen().name("Enabled"),e[this.prefix+"#ColorMap"]="viridis",this.applyColorMap(e[this.prefix+"#ColorMap"]),t.add(e,this.prefix+"#ColorMap",["viridis","coolwarm","plasma","magma","inferno"]).onChange((e=>{this.applyColorMap(e)})).listen().name("Color Map")}setEnabled(e){this.guiFields[this.prefix+"#Enabled"]=e,this.enabled=e,e?this.parent.enableQuantity(this):this.parent.disableQuantity(this)}setColorMap(e){this.guiFields[this.prefix+"#ColorMap"]=e,this.applyColorMap(e)}initializeColorMap(){let e=this.parent.faces.size(),i=new Float32Array(3*e*3);this.mesh.geometry.setAttribute("color",new t.BufferAttribute(i,3))}applyColorMap(e){const t=this.mesh.geometry.attributes.color.array;let i=this.parent.faces.size();for(let a=0;a<i;a++){let i=this.parent.faces.get(a);for(let n=0;n<3;n++){let s=_(e,this.values[this.parent.getCorner(i,n)],this.dataMin,this.dataMax);t[9*a+3*n+0]=s.r,t[9*a+3*n+1]=s.g,t[9*a+3*n+2]=s.b}}this.mesh.geometry.attributes.color.needsUpdate=!0}getVertexValue(e){return this.gp.prettyScalar(this.values[e])}getEdgeValue(e){}getFaceValue(e){}remove(){}}class F{constructor(e,i,a){this.parent=a,this.gp=this.parent.ps,this.values=i,this.name=e,this.enabled=!1,this.isDominantQuantity=!0,[this.dataMin,this.dataMax]=E(i),u(this.gp.matcapTextures.r,this.gp.matcapTextures.g,this.gp.matcapTextures.b,this.gp.matcapTextures.k);let n=u(this.gp.matcapTextures.r,this.gp.matcapTextures.g,this.gp.matcapTextures.b,this.gp.matcapTextures.k);this.mesh=new t.InstancedMesh(this.parent.mesh.geometry.clone(),n,this.parent.nV),this.mesh.geometry.attributes.position=this.parent.mesh.geometry.attributes.position,this.mesh.geometry.attributes.normal=this.parent.mesh.geometry.attributes.normal,this.mesh.material.uniforms.scale=this.parent.mesh.material.uniforms.scale,this.mesh.instanceMatrix=this.parent.mesh.instanceMatrix,this.initializeColorMap()}initGui(e,t){this.prefix=this.parent.name+"#"+this.name,this.guiFields=e,e[this.prefix+"#Enabled"]=!1,t.add(e,this.prefix+"#Enabled").onChange((e=>{this.setEnabled(e)})).listen().name("Enabled"),e[this.prefix+"#ColorMap"]="viridis",this.applyColorMap(e[this.prefix+"#ColorMap"]),t.add(e,this.prefix+"#ColorMap",["viridis","coolwarm","plasma","magma","inferno"]).onChange((e=>{this.applyColorMap(e)})).listen().name("Color Map")}setEnabled(e){this.guiFields[this.prefix+"#Enabled"]=e,this.enabled=e,e?this.parent.enableQuantity(this):this.parent.disableQuantity(this)}initializeColorMap(){let e=this.parent.nV,i=new Float32Array(3*e);this.mesh.geometry.setAttribute("color",new t.InstancedBufferAttribute(i,3))}applyColorMap(e){const t=this.mesh.geometry.attributes.color.array;let i=this.parent.nV;for(let a=0;a<i;a++){let i=_(e,this.values[a],this.dataMin,this.dataMax);t[3*a+0]=i.r,t[3*a+1]=i.g,t[3*a+2]=i.b}this.mesh.geometry.attributes.color.needsUpdate=!0}getVertexValue(e){return this.values[e]}getEdgeValue(e){}getFaceValue(e){}remove(){}}class V{constructor(e,t,i){this.parent=i,this.gp=this.parent.gp,this.values=t,this.name=e,this.enabled=!1,this.res=4,this.rad=.5,this.len=3,this.tipFrac=.3,this.widthFrac=.5,this.isDominantQuantity=!1,this.mesh=this.constructArrowMesh(this.parent.coords,t)}constructArrowMesh(e,i){let a=new t.CylinderGeometry(this.rad*this.widthFrac,this.rad*this.widthFrac,this.len*(1-this.tipFrac),this.res),n=a.attributes.position.array,s=a.attributes.position.count,r=-this.len*(1-this.tipFrac)/2;for(let e=0;e<s;e++)n[3*e+1]=n[3*e+1]-r;let o=new t.CylinderGeometry(0,this.rad,this.len*this.tipFrac,this.res);n=o.attributes.position.array,s=o.attributes.position.count,r=-this.len*this.tipFrac/2;for(let e=0;e<s;e++)n[3*e+1]=n[3*e+1]-r+this.len*(1-this.tipFrac);let d=new t.Matrix4;d.set(0,0,1,0,1,0,0,0,0,1,0,0,0,0,0,1),a.applyMatrix4(d),o.applyMatrix4(d);let l=h(this.gp.matcapTextures.r,this.gp.matcapTextures.g,this.gp.matcapTextures.b,this.gp.matcapTextures.k);l.uniforms.scale.value=.05;let c=this.parent.nV;this.torsoMesh=new t.InstancedMesh(a,l,c),this.tipMesh=new t.InstancedMesh(o,l,c),d=new t.Matrix4;for(let e=0;e<c;e++){let a=this.parent.coords.get(e),n=i.get(e);d.lookAt(n,new t.Vector3(0,0,0),new t.Vector3(0,0,1)),d.setPosition(a[0],a[1],a[2]),this.torsoMesh.setMatrixAt(e,d),this.tipMesh.setMatrixAt(e,d)}let u=new t.Group;return u.add(this.torsoMesh),u.add(this.tipMesh),u}initGui(e,t){this.prefix=this.parent.name+"#"+this.name,this.guiFields=e,e[this.prefix+"#Enabled"]=!1,t.add(e,this.prefix+"#Enabled").onChange((e=>{this.setEnabled(e)})).listen().name("Enabled"),e[this.name+"#Color"]=y(),this.setColor(e[this.name+"#Color"]),t.addColor(e,this.name+"#Color").onChange((e=>{this.setColor(e)})).listen().name("Color"),e[this.name+"#Radius"]=1,this.setRadius(e[this.name+"#Radius"]),t.add(e,this.name+"#Radius").min(0).max(5).step(.05).onChange((e=>{this.setRadius(e)})).listen().name("Radius")}setColor(e){let i=new t.Vector3(e[0]/255,e[1]/255,e[2]/255);this.torsoMesh.material.uniforms.color.value=i,this.tipMesh.material.uniforms.color.value=i}setRadius(e){this.torsoMesh.material.uniforms.scale.value=.05*e,this.tipMesh.material.uniforms.scale.value=.05*e}setEnabled(e){this.guiFields[this.prefix+"#Enabled"]=e,this.enabled=e,e?this.parent.enableQuantity(this):this.parent.disableQuantity(this)}getVertexValue(e){let t=this.values.get(e),i=[t.x,t.y,t.z];return this.gp.prettyVector(i)}getEdgeValue(e){}getFaceValue(e){}}class T{constructor(e,t,i,a){this.gp=a,this.nV=e.size(),this.coords=e,this.faces=t,this.name=i,this.enabled=!0,[this.mesh,this.geo]=this.constructThreeMesh(e,t),[this.smoothVertexNormals,this.smoothCornerNormals]=this.computeSmoothNormals(),this.pickMesh=this.constructThreePickMesh(e,t),this.quantities={},this.setSmoothShading(!0),this.guiFields=void 0,this.guiFolder=void 0}addVertexScalarQuantity(e,t){this.quantities[e]=new k(e,t,this);let i=this.guiFolder.addFolder(e);return this.quantities[e].initGui(this.guiFields,i),this.quantities[e]}addVertexVectorQuantity(e,t){this.quantities[e]=new V(e,t,this);let i=this.guiFolder.addFolder(e);return this.quantities[e].initGui(this.guiFields,i),this.quantities[e]}initGui(e,t){this.guiFields=e,this.guiFolder=t;let i=t.domElement.firstChild,a=document.createElement("li");a.classList.add("dat-info-box"),i.appendChild(a);let n=document.createElement("span");n.innerHTML="#verts: "+this.nV;let s=document.createElement("span");s.innerHTML="   #faces: "+this.faces.size(),a.appendChild(n),a.appendChild(s),e[this.name+"#Enabled"]=!0;let r=t.add(e,this.name+"#Enabled").onChange((e=>{this.setEnabled(e)})).listen().name("Enabled").domElement.closest("li");r.classList.add("half-button"),r.style.width="35%",e[this.name+"#Smooth"]=!0;r=t.add(e,this.name+"#Smooth").onChange((e=>{this.setSmoothShading(e)})).listen().name("Smooth").domElement.closest("li"),r.classList.add("half-button"),r.style.width="35%",e[this.name+"#Edges"]=!1;r=t.add(e,this.name+"#Edges").onChange((e=>{this.setEdgesEnabled(e)})).listen().name("Edges").domElement.closest("li"),r.classList.add("half-button"),r.style.width="30%",e[this.name+"#Color"]=y(),this.setColor(e[this.name+"#Color"]),t.addColor(e,this.name+"#Color").onChange((e=>{this.setColor(e)})).listen().name("Color"),e[this.name+"#Edge Width"]=0,this.edgeWidth=1;r=t.add(e,this.name+"#Edge Width").min(0).max(2).step(.05).onChange((e=>{this.edgeWidth=e,this.mesh.material.uniforms.edgeWidth.value=e})).listen().name("Edge Width").domElement.closest("li"),r.style.display="none",this.edgeGuis=[r],e[this.name+"#Edge Color"]=[0,0,0];r=t.addColor(e,this.name+"#Edge Color").onChange((e=>{this.setEdgeColor(e)})).listen().name("Edge Color").domElement.closest("li"),r.style.display="none",this.edgeGuis.push(r),t.open()}setEdgesEnabled(e){this.guiFields[this.name+"#Edges"]=e;for(let t of this.edgeGuis)t.style.display=e?"block":"none";e?(this.mesh.material.uniforms.edgeWidth.value=this.edgeWidth,this.guiFields[this.name+"#Edge Width"]=this.edgeWidth):(this.mesh.material.uniforms.edgeWidth.value=0,this.guiFields[this.name+"#Edge Width"]=0)}setSmoothShading(e){e?this.mesh.geometry.attributes.normal.array=new Float32Array(this.smoothCornerNormals):this.mesh.geometry.computeVertexNormals(),this.mesh.geometry.attributes.normal.needsUpdate=!0}setColor(e){let i=new t.Vector3(e[0]/255,e[1]/255,e[2]/255);this.mesh.material.uniforms.color.value=i}setEdgeColor(e){let i=new t.Vector3(e[0]/255,e[1]/255,e[2]/255);this.mesh.material.uniforms.edgeColor.value=i}setEnabled(e){if(this.enabled=e,this.guiFields[this.name+"#Enabled"]=e,e){let e=!1;for(let t in this.quantities)this.quantities[t].enabled&&(this.gp.scene.add(this.quantities[t].mesh),e=!0);e||this.gp.scene.add(this.mesh),this.gp.pickScene.add(this.pickMesh)}else{for(let e in this.quantities)this.gp.scene.remove(this.quantities[e].mesh);this.gp.scene.remove(this.mesh),this.gp.pickScene.remove(this.pickMesh)}}enableQuantity(e){if(e.isDominantQuantity)for(let t in this.quantities){let i=this.quantities[t];i.isDominantQuantity&&t!=e.name&&(this.guiFields[i.prefix+"#Enabled"]=!1,i.enabled=!1,this.gp.scene.remove(i.mesh))}this.enabled&&(e.isDominantQuantity&&this.gp.scene.remove(this.mesh),this.gp.scene.add(e.mesh))}disableQuantity(e){this.enabled&&(this.gp.scene.remove(e.mesh),this.gp.scene.add(this.mesh))}remove(){for(let e in this.quantities)this.gp.scene.remove(this.quantities[e].mesh),this.quantities[e].remove();this.quantities={}}computeSmoothNormals(){let e=this.nV,i=this.faces.size(),a=new Float32Array(3*e);for(let t=0;t<e;++t)a[3*t+0]=0,a[3*t+1]=0,a[3*t+2]=0;const n=this.mesh.geometry.attributes.normal.array;for(let e=0;e<i;e++){let t=this.faces.get(e);for(let i=0;i<3;i++){let s=this.getCorner(t,i);for(let t=0;t<3;++t)a[3*s+t]+=n[9*e+3*i+t]}}for(let i=0;i<e;++i){let e=new t.Vector3(a[3*i+0],a[3*i+1],a[3*i+2]);e.normalize(),a[3*i+0]=e.x,a[3*i+1]=e.y,a[3*i+2]=e.z}let s=new Float32Array(3*i*3);for(let e=0;e<i;e++){let t=this.faces.get(e);for(let i=0;i<3;i++)for(let n=0;n<3;++n)s[9*e+3*i+n]=a[3*this.getCorner(t,i)+n]}return[a,s]}setPosition(e){let i=new t.Euler(this.mesh.rotation.x,this.mesh.rotation.y,this.mesh.rotation.z);this.mesh.setRotationFromAxisAngle(new t.Vector3(1,0,0),0),this.pickMesh.setRotationFromAxisAngle(new t.Vector3(1,0,0),0);let a=this.mesh.position;this.mesh.translateX(e.x-a.x,1),this.mesh.translateY(e.y-a.y,1),this.mesh.translateZ(e.z-a.z,1),a=this.pickMesh.position,this.pickMesh.translateX(e.x-a.x,1),this.pickMesh.translateY(e.y-a.y,1),this.pickMesh.translateZ(e.z-a.z,1),this.mesh.setRotationFromEuler(i),this.pickMesh.setRotationFromEuler(i)}setOrientationFromMatrix(e){this.mesh.setRotationFromAxisAngle(new t.Vector3(1,0,0),0),this.mesh.setRotationFromMatrix(e),this.pickMesh.setRotationFromAxisAngle(new t.Vector3(1,0,0),0),this.pickMesh.setRotationFromMatrix(e)}setOrientationFromFrame(e,i,a){let n=new t.Matrix4;n.set(-e.x,i.x,-a.x,0,-e.y,i.y,-a.y,0,-e.z,i.z,-a.z,0,0,0,0,1),this.setOrientationFromMatrix(n)}constructThreeMesh(e,i){let a=new t.BufferGeometry;i.get(0).get?this.getCorner=function(e,t){return e.get(t)}:i.get(0)[0]&&(this.getCorner=function(e,t){return e[t]}),e.get(0)[0]?this.getDim=function(e,t){return e[t]}:e.get(0).x&&(this.getDim=function(e,t){return 0==t?e.x:1==t?e.y:e.z});let n=i.size(),s=new Float32Array(3*n*3),r=new Float32Array(3*n*3);for(let t=0;t<n;t++){let a=i.get(t);for(let i=0;i<3;i++){let n=e.get(this.getCorner(a,i));for(let e=0;e<3;++e)s[9*t+3*i+e]=this.getDim(n,e),r[9*t+3*i+e]=e==i?1:0}}a.setAttribute("position",new t.BufferAttribute(s,3)),a.setAttribute("barycoord",new t.BufferAttribute(r,3)),a.computeVertexNormals();let o=function(e,i,a,n){let s=`\n        uniform sampler2D Matcap_r; // Matcap texture\n        uniform sampler2D Matcap_g; // Matcap texture\n        uniform sampler2D Matcap_b; // Matcap texture\n        uniform sampler2D Matcap_k; // Matcap texture\n        uniform vec3 color;\n        uniform vec3 edgeColor;\n        uniform float edgeWidth;\n\n        varying vec2 Point;\n        varying vec3 Barycoord;\n\n        ${c}\n\n        void main(void){\n\n\n            float alpha = getEdgeFactor(Barycoord, vec3(1.,1.,1.), edgeWidth);\n            vec2 coord = Point;\n\n            vec4 mat_r = sRGBToLinear(texture2D(Matcap_r, coord));\n            vec4 mat_g = sRGBToLinear(texture2D(Matcap_g, coord));\n            vec4 mat_b = sRGBToLinear(texture2D(Matcap_b, coord));\n            vec4 mat_k = sRGBToLinear(texture2D(Matcap_k, coord));\n\n            vec4 colorCombined = color.r * mat_r + color.g * mat_g + color.b * mat_b +\n                                (1. - color.r - color.g - color.b) * mat_k;\n\n            vec4 edgeColorCombined = edgeColor.r * mat_r + edgeColor.g * mat_g + edgeColor.b * mat_b +\n                                (1. - edgeColor.r - edgeColor.g - edgeColor.b) * mat_k;\n\n            gl_FragColor = (1.-alpha) * colorCombined + alpha * edgeColorCombined;\n            gl_FragColor = LinearTosRGB( gl_FragColor );\n        }\n    `,r=new t.ShaderMaterial({uniforms:{Matcap_r:{value:e},Matcap_g:{value:i},Matcap_b:{value:a},Matcap_k:{value:n},color:{value:new t.Vector3(1,0,1)},edgeColor:{value:new t.Vector3(0,0,0)},edgeWidth:{value:0}},vertexShader:"\n        attribute vec3 barycoord;\n\n        varying vec2 Point;\n        varying vec3 Barycoord;\n\n        void main()\n        {\n            vec3 vNormal = ( mat3( modelViewMatrix ) * normal );\n            vNormal = normalize(vNormal);\n\n            // pull slightly inward, to reduce sampling artifacts near edges\n            Point.x = 0.93 * vNormal.x * 0.5 + 0.5;\n            Point.y = 0.93 * vNormal.y * 0.5 + 0.5;\n\n            Barycoord = barycoord;\n\n            gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n        }\n    ",fragmentShader:s});return r.side=t.DoubleSide,r}(this.gp.matcapTextures.r,this.gp.matcapTextures.g,this.gp.matcapTextures.b,this.gp.matcapTextures.k);return[new t.Mesh(a,o),a]}pickElement(e){if(e<this.facePickIndStart){this.gp.setDataHeader(`Surface Mesh ${this.name}`,`Vertex ${e}`),this.gp.clearDataFields(),this.gp.showDataField("position",this.gp.prettyVector(this.coords.get(e)));for(let t in this.quantities){let i=this.quantities[t].getVertexValue(e);i&&this.gp.showDataField(t,i)}}else e<this.edgePickIndStart?(this.gp.setDataHeader(`Surface Mesh ${this.name}`,"Face "+(e-this.facePickIndStart)),this.gp.clearDataFields()):(this.gp.setDataHeader(`Surface Mesh ${this.name}`,"Edge "+(e-this.edgePickIndStart)),this.gp.clearDataFields())}constructThreePickMesh(e,i){let a=new t.BufferGeometry,n=(e,t)=>[Math.min(e,t),Math.max(e,t)],s=i.size(),r=0;this.edges=[];let o={};for(let e=0;e<s;e++){let t=i.get(e);for(let e=0;e<3;++e){r=Math.max(r,this.getCorner(t,e)+1);let i=n(this.getCorner(t,e),this.getCorner(t,(e+1)%3));i in o||(o[i]=this.edges.length,this.edges.push(i))}}let d=r+this.edges.length+s;this.facePickIndStart=r,this.edgePickIndStart=this.facePickIndStart+s;let l=p(this,d),h=l+r,u=h+s,m=new Float32Array(9*s),f=new Float32Array(9*s),g=new Float32Array(9*s),v=new Float32Array(9*s),x=new Float32Array(9*s),C=new Float32Array(9*s),M=new Float32Array(9*s);for(let e=0;e<s;e++){let t=i.get(e),a=b(e+h),s=[0,1,2].map((e=>b(l+this.getCorner(t,e)))),r=[1,2,0].map((e=>{let i=n(this.getCorner(t,e),this.getCorner(t,(e+1)%3));return b(u+o[i])}));for(let i=0;i<3;i++){this.getCorner(t,i);for(let t=0;t<3;++t)M[9*e+3*i+t]=a[t],m[9*e+3*i+t]=s[0][t],f[9*e+3*i+t]=s[1][t],g[9*e+3*i+t]=s[2][t],v[9*e+3*i+t]=r[2][t],x[9*e+3*i+t]=r[0][t],C[9*e+3*i+t]=r[1][t]}}a.setAttribute("position",this.mesh.geometry.attributes.position),a.setAttribute("barycoord",this.mesh.geometry.attributes.barycoord),a.setAttribute("vertex_color0",new t.BufferAttribute(m,3)),a.setAttribute("vertex_color1",new t.BufferAttribute(f,3)),a.setAttribute("vertex_color2",new t.BufferAttribute(g,3)),a.setAttribute("edge_color0",new t.BufferAttribute(v,3)),a.setAttribute("edge_color1",new t.BufferAttribute(x,3)),a.setAttribute("edge_color2",new t.BufferAttribute(C,3)),a.setAttribute("face_color",new t.BufferAttribute(M,3));let y=function(){let e=`\n        varying vec3 BaryCoord;\n        varying vec3 VertexColor0;\n        varying vec3 VertexColor1;\n        varying vec3 VertexColor2;\n        varying vec3 EdgeColor0;\n        varying vec3 EdgeColor1;\n        varying vec3 EdgeColor2;\n        varying vec3 FaceColor;\n\n        ${c}\n\n        void main(void){\n\n            // Parameters defining the pick shape (in barycentric 0-1 units)\n            float vertRadius = 0.2;\n            float edgeRadius = 0.2;\n\n            vec3 shadeColor = FaceColor;\n\n            // Test vertices\n            if (BaryCoord[0] > 1.0-vertRadius) {\n                shadeColor = VertexColor0;\n            } else if(BaryCoord[1] > 1.0-vertRadius) {\n                shadeColor = VertexColor1;\n            } else if (BaryCoord[2] > 1.0-vertRadius) {\n                shadeColor = VertexColor2;\n            } else if (BaryCoord[2] < edgeRadius) {\n                shadeColor = EdgeColor0;\n            } else if (BaryCoord[0] < edgeRadius) {\n                shadeColor = EdgeColor1;\n            } else if (BaryCoord[1] < edgeRadius) {\n                shadeColor = EdgeColor2;\n            }\n\n            gl_FragColor = vec4(shadeColor, 1.);\n        }\n    `,i=new t.ShaderMaterial({vertexShader:"\n        attribute vec3 barycoord;\n        attribute vec3 color;\n        attribute vec3 vertex_color0;\n        attribute vec3 vertex_color1;\n        attribute vec3 vertex_color2;\n        attribute vec3 edge_color0;\n        attribute vec3 edge_color1;\n        attribute vec3 edge_color2;\n        attribute vec3 face_color;\n\n        varying vec3 BaryCoord;\n        varying vec3 VertexColor0;\n        varying vec3 VertexColor1;\n        varying vec3 VertexColor2;\n        varying vec3 EdgeColor0;\n        varying vec3 EdgeColor1;\n        varying vec3 EdgeColor2;\n        varying vec3 FaceColor;\n\n\n        void main()\n        {\n            BaryCoord = barycoord;\n            VertexColor0 = vertex_color0;\n            VertexColor1 = vertex_color1;\n            VertexColor2 = vertex_color2;\n            EdgeColor0 = edge_color0;\n            EdgeColor1 = edge_color1;\n            EdgeColor2 = edge_color2;\n            FaceColor = face_color;\n\n            gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n        }\n    ",fragmentShader:e});return i.side=t.DoubleSide,i}();return new t.Mesh(a,y)}updatePositions(){}}class G{constructor(e,t,i){this.gp=i,this.nV=e.size(),this.coords=e,this.name=t,this.enabled=!0,this.mesh=this.constructThreeMesh(e),this.pickMesh=this.constructThreePickMesh(e),this.quantities={},this.guiFields=void 0,this.guiFolder=void 0}addScalarQuantity(e,t){this.quantities[e]=new F(e,t,this);let i=this.guiFolder.addFolder(e);this.quantities[e].initGui(this.guiFields,i)}initGui(e,t){this.guiFields=e,this.guiFolder=t;let i=t.domElement.firstChild,a=document.createElement("li");a.classList.add("dat-info-box"),i.appendChild(a);let n=document.createElement("span");n.innerHTML="#verts: "+this.nV,a.appendChild(n),e[this.name+"#Enabled"]=!0,t.add(e,this.name+"#Enabled").onChange((e=>{this.setEnabled(e)})).listen().name("Enabled"),e[this.name+"#Color"]=y(),this.setColor(e[this.name+"#Color"]),t.addColor(e,this.name+"#Color").onChange((e=>{this.setColor(e)})).listen().name("Color"),e[this.name+"#Radius"]=1,this.setRadius(e[this.name+"#Radius"]),t.add(e,this.name+"#Radius").min(0).max(5).step(.05).onChange((e=>{this.setRadius(e)})).listen().name("Radius"),t.open()}setColor(e){let i=new t.Vector3(e[0]/255,e[1]/255,e[2]/255);this.mesh.material.uniforms.color.value=i}setRadius(e){this.mesh.material.uniforms.scale.value=e,this.pickMesh.material.uniforms.scale.value=e}setEnabled(e){if(this.guiFields[this.name+"#Enabled"]=e,this.enabled=e,e){let e=!1;for(let t in this.quantities)this.quantities[t].enabled&&(this.gp.scene.add(this.quantities[t].mesh),e=!0);e||this.gp.scene.add(this.mesh),this.gp.pickScene.add(this.pickMesh)}else{for(let e in this.quantities)this.gp.scene.remove(this.quantities[e].mesh);this.gp.scene.remove(this.mesh),this.gp.pickScene.remove(this.pickMesh)}}enableQuantity(e){if(e.isDominantQuantity)for(let t in this.quantities){let i=this.quantities[t];i.isDominantQuantity&&t!=e.name&&(this.guiFields[i.prefix+"#Enabled"]=!1,i.enabled=!1,this.gp.scene.remove(i.mesh))}this.enabled&&(e.isDominantQuantity&&this.gp.scene.remove(this.mesh),this.gp.scene.add(e.mesh))}disableQuantity(e){this.enabled&&(this.gp.scene.remove(e.mesh),this.gp.scene.add(this.mesh))}remove(){for(let e in this.quantities)this.gp.scene.remove(this.quantities[e].mesh),this.quantities[e].remove();this.quantities={}}constructThreeMesh(e){let i=new t.IcosahedronGeometry(.025,2),a=h(this.gp.matcapTextures.r,this.gp.matcapTextures.g,this.gp.matcapTextures.b,this.gp.matcapTextures.k),n=new t.InstancedMesh(i,a,this.nV),s=new t.Matrix4;new Float32Array(3*this.nV);for(let t=0;t<this.nV;t++){let i=e.get(t);s.setPosition(i[0],i[1],i[2]),n.setMatrixAt(t,s)}return n}pickElement(e){this.gp.setDataHeader(`Point Cloud ${this.name}`,`Vertex ${e}`),this.gp.clearDataFields(),this.gp.showDataField("position",this.gp.prettyVector(this.coords.get(e)));for(let t in this.quantities){let i=this.quantities[t].getVertexValue(e);i&&this.gp.showDataField(t,i)}}constructThreePickMesh(e){let i=this.nV,a=new Float32Array(3*this.nV),n=p(this,i);for(let e=0;e<this.nV;e++){let t=b(e+n);for(let i=0;i<3;++i)a[3*e+ +i]=t[i]}let s=function(){let e=`\n        varying vec3 Color;\n\n        ${c}\n\n        void main(void){\n            gl_FragColor = vec4(Color, 1.);\n        }\n    `;return new t.ShaderMaterial({vertexShader:"\n        uniform float scale;\n        attribute vec3 color;\n\n        varying vec3 Color;\n\n\n        void main()\n        {\n            Color = color;\n\n            gl_Position = projectionMatrix * modelViewMatrix * instanceMatrix * vec4( scale * position, 1.0 );\n\n        }\n    ",fragmentShader:e})}(),r=new t.InstancedMesh(this.mesh.geometry.clone(),s,this.nV);return r.geometry.setAttribute("color",new t.InstancedBufferAttribute(a,3)),r.geometry.attributes.position=this.mesh.geometry.attributes.position,r.material.uniforms.scale=this.mesh.material.uniforms.scale,r.instanceMatrix=this.mesh.instanceMatrix,r}updatePositions(){}}class P{constructor(e,t,i,a,n){this.gp=n,this.res=12,[this.mesh,this.tubeMesh,this.pointMesh]=this.constructThreeCurveNetwork(e,t,i),this.nV=e.length,this.segments=t,this.maxLen=i,this.name=a,this.quantities={},this.guiFields=void 0,this.guiFolder=void 0}setEnabled(e){this.guiFields[this.name+"#Enabled"]=e,e?this.gp.scene.add(this.mesh):this.gp.scene.remove(this.mesh)}remove(){for(let e in this.quantities)this.gp.scene.remove(this.quantities[e].mesh),this.quantities[e].remove();this.quantities={}}updateVertexPositions(e){const i=this.tubeMesh.geometry.attributes.len.array;let a=new t.Matrix4;for(let n=0;n<this.segments.length;n++){let s=this.gp.listToVec(e[this.segments[n][0]]),r=this.gp.listToVec(e[this.segments[n][1]]),o=new t.Vector3;o.subVectors(s,r),i[n]=o.length(),a.lookAt(new t.Vector3(0,0,0),o,new t.Vector3(0,0,1)),a.setPosition(s.x,s.y,s.z),this.tubeMesh.setMatrixAt(n,a),this.pointMesh.setMatrixAt(this.segments[n][0],a),this.pointMesh.setMatrixAt(this.segments[n][1],a)}this.tubeMesh.geometry.attributes.len.needsUpdate=!0,this.tubeMesh.instanceMatrix.needsUpdate=!0,this.pointMesh.instanceMatrix.needsUpdate=!0}setColor(e){let i=new t.Vector3(e[0]/255,e[1]/255,e[2]/255);this.tubeMesh.material.uniforms.color.value=i,this.pointMesh.material.uniforms.color.value=i}setEdgeWidth(e){this.tubeMesh.material.uniforms.rad.value=e/100,this.pointMesh.material.uniforms.scale.value=e/100}initGui(e,t){this.guiFields=e,this.guiFolder=t;let i=t.domElement.firstChild,a=document.createElement("li");a.classList.add("dat-info-box"),i.appendChild(a);let n=document.createElement("span");n.innerHTML="#verts: "+this.nV;let s=document.createElement("span");s.innerHTML="   #edges: "+this.segments.length,a.appendChild(n),a.appendChild(s),e[this.name+"#Enabled"]=!0,t.add(e,this.name+"#Enabled").onChange((e=>{this.setEnabled(e)})).listen().name("Enabled"),e[this.name+"#Color"]=y(),this.setColor(e[this.name+"#Color"]),t.addColor(e,this.name+"#Color").onChange((e=>{this.setColor(e)})).listen().name("Color"),e[this.name+"#Width"]=1,this.setEdgeWidth(e[this.name+"#Width"]),t.add(e,this.name+"#Width").min(0).max(50).step(.25).onChange((e=>{this.setEdgeWidth(e)})).listen().name("Edge Width"),t.open()}constructThreeCurveNetwork(e,i,a){let n=new t.CylinderGeometry(1,1,1,this.res),s=new t.SphereGeometry(1,this.res,this.res),r=n.attributes.position.array,o=n.attributes.position.count;for(let e=0;e<o;e++)r[3*e+1]=r[3*e+1]- -.5;let d=new t.Matrix4;d.set(0,0,1,0,1,0,0,0,0,1,0,0,0,0,0,1),n.applyMatrix4(d),s.applyMatrix4(d);let l=function(e,i,a,n){let s=`\n        uniform sampler2D Matcap_r; // Matcap texture\n        uniform sampler2D Matcap_g; // Matcap texture\n        uniform sampler2D Matcap_b; // Matcap texture\n        uniform sampler2D Matcap_k; // Matcap texture\n        uniform vec3 color;\n\n        varying vec2 Point;\n\n        ${c}\n\n        void main(void){\n\n            vec2 coord = Point;\n\n            vec4 mat_r = sRGBToLinear(texture2D(Matcap_r, coord));\n            vec4 mat_g = sRGBToLinear(texture2D(Matcap_g, coord));\n            vec4 mat_b = sRGBToLinear(texture2D(Matcap_b, coord));\n            vec4 mat_k = sRGBToLinear(texture2D(Matcap_k, coord));\n\n            vec4 colorCombined = color.r * mat_r + color.g * mat_g + color.b * mat_b +\n                                (1. - color.r - color.g - color.b) * mat_k;\n\n            gl_FragColor = colorCombined;\n            gl_FragColor = LinearTosRGB( gl_FragColor );\n        }\n    `,r=new t.ShaderMaterial({uniforms:{Matcap_r:{value:e},Matcap_g:{value:i},Matcap_b:{value:a},Matcap_k:{value:n},color:{value:new t.Vector3(1,0,1)},rad:{value:1}},vertexShader:"\n        uniform float rad;\n        attribute float len;\n\n        varying vec2 Point;\n\n        void main()\n        {\n            vec3 vNormal = (modelViewMatrix * instanceMatrix * vec4(normal, 0.)).xyz;\n            vNormal = normalize(vNormal);\n\n            // pull slightly inward, to reduce sampling artifacts near edges\n            Point.x = 0.93 * vNormal.x * 0.5 + 0.5;\n            Point.y = 0.93 * vNormal.y * 0.5 + 0.5;\n\n            vec3 scaled_position = vec3(position.x * rad, position.y*rad, position.z*len);\n            gl_Position = projectionMatrix * modelViewMatrix * instanceMatrix * vec4( scaled_position, 1.0 );\n\n        }\n    ",fragmentShader:s});return r.side=t.DoubleSide,r}(this.gp.matcapTextures.r,this.gp.matcapTextures.g,this.gp.matcapTextures.b,this.gp.matcapTextures.k);l.uniforms.rad.value=.05;let u=h(this.gp.matcapTextures.r,this.gp.matcapTextures.g,this.gp.matcapTextures.b,this.gp.matcapTextures.k);u.uniforms.scale.value=.05;let m=new t.InstancedMesh(n,l,i.length),f=new t.InstancedMesh(s,u,e.length),p=new Float32Array(i.length);d=new t.Matrix4;for(let a=0;a<i.length;a++){let n=this.gp.listToVec(e[i[a][0]]),s=this.gp.listToVec(e[i[a][1]]),r=new t.Vector3;r.subVectors(n,s),p[a]=r.length(),d.lookAt(new t.Vector3(0,0,0),r,new t.Vector3(0,0,1)),d.setPosition(n.x,n.y,n.z),m.setMatrixAt(a,d),f.setMatrixAt(i[a][0],d),f.setMatrixAt(i[a][1],d)}m.geometry.setAttribute("len",new t.InstancedBufferAttribute(p,1));let g=new t.Group;return g.add(m),g.add(f),[g,m,f]}}o.GUI.prototype.removeFolder=function(e){var t=this.__folders[e];t&&(t.close(),this.__ul.removeChild(t.domElement.parentNode),delete this.__folders[e],this.onResize())};e.Geoptic=class{constructor(e={}){a.WEBGL.isWebGLAvailable()||alert(a.WEBGL.getWebGLErrorMessage()),this.geopticPath=e.path||"js/geoptic.js",this.parent=e.parent||document.body,this.input=void 0,this.renderer=void 0,this.scene=void 0,this.camera=void 0,this.controls=void 0,this.shiftClick=!1,this.matcapTextures=void 0,this.pickRenderer=void 0,this.pickScene=void 0,this.surfaceMeshes={},this.curveNetworks={},this.pointClouds={},this.mesh=void 0,this.geo=void 0,this.structureGui=void 0,this.structureGuiFields={},this.structureGuiMeshes=void 0,this.structureGuiCurveNetworks=void 0,this.structureGuiPointClouds=void 0,this.commandGui=new o.GUI({resizeable:!0}),this.commandGuiFields={};let i=document.createElement("div");this.parent.appendChild(i),i.id="command-gui",i.appendChild(this.commandGui.domElement),this.groundPlane=void 0,this.onMeshLoad=e=>{},this.userCallback=()=>{},this.sceneMin=new t.Vector3(0,0,0),this.sceneMax=new t.Vector3(0,0,0)}initInput(){let e=document.createElement("div");this.input=document.createElement("input"),e.appendChild(this.input),document.body.appendChild(e),this.input.id="fileInput",this.input.style.display="none",this.input.type="file"}init(){this.initInput(),this.input.addEventListener("change",function(e){document.getElementById("spinner").style.display="inline-block";let t=this.input.files[0];if(t.name.endsWith(".obj")){let e=new FileReader;e.onload=function(t){this.onMeshLoad(e.result),document.getElementById("spinner").style.display="none"}.bind(this),e.onerror=function(e){alert("Unable to load OBJ file"),document.getElementById("spinner").style.display="none"},e.readAsText(t)}else alert("Please load an OBJ file"),document.getElementById("spinner").style.display="none"}.bind(this)),this.initDOM(),this.stats=new l.default,this.stats.dom.style.position="absolute",this.container.append(this.stats.dom),this.initRenderer(this.container),this.initMatcap(),this.initGUI(),this.initCamera(),this.initScene(),this.initLights(),this.initControls(),this.initGroundPlane(),this.addEventListeners()}initDOM(){this.container=document.createElement("div"),this.container.style.height="100%",this.container.style.overflow="hidden",this.container.style.position="relative",this.parent.appendChild(this.container);let e=document.createElement("div");e.id="selection-info";let t=document.createElement("div");t.id="info-head";let i=document.createElement("div");i.id="info-head-structure";let a=document.createElement("div");a.id="info-head-name";let n=document.createElement("div");n.id="info-body";let s=document.createElement("div");s.id="info-body-field-names";let r=document.createElement("div");r.id="info-body-field-values",n.appendChild(s),n.appendChild(r),t.appendChild(i),t.appendChild(a),e.appendChild(t),e.appendChild(n),this.container.appendChild(e);let o=document.createElement("div");o.id="messages",this.container.appendChild(o)}initGroundPlane(){let e=(new t.TextureLoader).load(this.geopticPath+"/img/concrete.png");this.groundPlane=new n.Reflector(new t.PlaneGeometry(100,100),{clipBias:.003,textureWidth:this.parent.offsetWidth*window.devicePixelRatio,textureHeight:this.parent.offsetHeight*window.devicePixelRatio,color:7829367}),this.groundPlane.material.vertexShader="\n  uniform mat4 textureMatrix;\n  attribute vec2 texture_uv;\n\n  varying vec4 vUv;\n  varying vec2 TextureUV;\n\n  void main() {\n\n  \tvUv = textureMatrix * vec4( position, 1.0 );\n\n    TextureUV = texture_uv;\n\n  \tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n  }\n",this.groundPlane.material.fragmentShader="\n    uniform vec3 color;\n    uniform sampler2D tDiffuse;\n    uniform sampler2D tex;\n    uniform float alpha;\n\n    varying vec2 TextureUV;\n    varying vec4 vUv;\n\n    float blendOverlay( float base, float blend ) {\n        return( base < 0.5 ? ( 2.0 * base * blend ) : ( 1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );\n    }\n\n    vec3 blendOverlay( vec3 base, vec3 blend ) {\n        return vec3( blendOverlay( base.r, blend.r ), blendOverlay( base.g, blend.g ), blendOverlay( base.b, blend.b ) );\n    }\n\n    float onGrid(vec2 coord2D) {\n        // Checker stripes\n        float modDist = min(min(mod(coord2D.x, 1.0), mod(coord2D.y, 1.0)), min(mod(-coord2D.x, 1.0), mod(-coord2D.y, 1.0)));\n        return 1.-smoothstep(0.005, .02, modDist);\n    }\n\n    void main() {\n\n        vec4 mat = texture2D(tex, TextureUV);\n        vec4 base = texture2DProj( tDiffuse, vUv );\n        float t = onGrid(26.*TextureUV);\n\n        gl_FragColor = (1.-t) * ((1.-alpha) * vec4( blendOverlay( base.rgb, color ), 1.0 ) + alpha * mat) + t*vec4(0.3,0.3,0.3,1.);\n\n    }\n",this.groundPlane.material.uniforms.tex={value:e},this.groundPlane.material.uniforms.alpha={value:.5},this.groundPlane.geometry.setAttribute("texture_uv",new t.BufferAttribute(Float32Array.from([0,0,0,1,1,0,1,1]),2)),this.groundPlane.rotateX(-Math.PI/2),this.scene.add(this.groundPlane)}loadMesh(e){this.onMeshLoad=e,this.input.click()}initMatcap(){this.matcapTextures={r:void 0,g:void 0,b:void 0,k:void 0},this.matcapTextures.r=(new t.TextureLoader).load(this.geopticPath+"/img/clay_r.png"),this.matcapTextures.g=(new t.TextureLoader).load(this.geopticPath+"/img/clay_g.png"),this.matcapTextures.b=(new t.TextureLoader).load(this.geopticPath+"/img/clay_b.png"),this.matcapTextures.k=(new t.TextureLoader).load(this.geopticPath+"/img/clay_k.png")}initRenderer(e){this.renderer=new t.WebGLRenderer({antialias:!0}),this.renderer.setPixelRatio(window.devicePixelRatio),this.renderer.setClearColor(16777215,1),this.renderer.setSize(this.parent.offsetWidth,this.parent.offsetHeight),this.container.appendChild(this.renderer.domElement),this.pickRenderer=new t.WebGLRenderer({antialias:!1}),this.pickRenderer.setPixelRatio(window.devicePixelRatio),this.pickRenderer.setClearColor(16777215,1),this.pickRenderer.setSize(this.parent.offsetWidth,this.parent.offsetHeight),e.appendChild(this.pickRenderer.domElement)}initGUI(){this.structureGui=new o.GUI({autoPlace:!1,resizeable:!0});let e=document.createElement("div");this.parent.appendChild(e),e.id="structure-gui",e.appendChild(this.structureGui.domElement),this.geopticOptions=this.structureGui.addFolder("Geoptic"),this.geopticOptions.open(),this.structureGuiFields["GroundPlane#Enabled"]=!0,this.geopticOptions.add(this.structureGuiFields,"GroundPlane#Enabled").onChange((e=>{e?this.scene.add(this.groundPlane):this.scene.remove(this.groundPlane)})).listen().name("Ground Plane")}initCamera(){const e=this.parent.offsetWidth/this.parent.offsetHeight;this.camera=new t.PerspectiveCamera(45,e,.01,1e3),this.camera.position.z=3.5}initScene(){this.scene=new t.Scene,this.scene.background=new t.Color(16777215),this.pickScene=new t.Scene,this.pickScene.background=new t.Color(16777215)}initLights(){let e=new t.AmbientLight(16777215,.35);this.camera.add(e);let i=new t.PointLight(16777215);i.position.set(2,20,15),this.camera.add(i),this.scene.add(this.camera)}standardizeDataArray(e){!e.size&&e.length&&(e.size=function(){return e.length}),!e.get&&e[0]&&(e.get=function(t){return e[t]})}registerSurfaceMesh(e,i,a,n=1){this.standardizeDataArray(i),this.standardizeDataArray(a),this.structureGuiMeshes||(this.structureGuiMeshes=this.structureGui.addFolder("Surface Meshes"),this.structureGuiMeshes.open());let s=new T(i,a,e,this);this.surfaceMeshes[e]=s;let r=this.structureGuiMeshes.addFolder(e);s.initGui(this.structureGuiFields,r),this.scene.add(s.mesh),this.pickScene.add(s.pickMesh);let o=(new t.Box3).setFromObject(s.mesh);this.sceneMin.min(o.min),this.sceneMax.max(o.max);let d=this.groundPlane.position;return this.groundPlane.translateZ(this.sceneMin.y-d.y,1),s}registerCurveNetwork(e,t,i){if(this.standardizeDataArray(t),this.structureGuiCurveNetworks||(this.structureGuiCurveNetworks=this.structureGui.addFolder("Curve Networks"),this.structureGuiCurveNetworks.open()),!i){i=[];for(let e=0;e+1<t.length;e++)i.push([e,e+1])}let a=t.length,n=new P(t,i,a,e,this);this.curveNetworks[e]=n;let s=this.structureGuiCurveNetworks.addFolder(e);return n.initGui(this.structureGuiFields,s),this.scene.add(n.mesh),n}registerPointCloud(e,t){this.standardizeDataArray(t),this.structureGuiPointCluods||(this.structureGuiPointClouds=this.structureGui.addFolder("Point Clouds"),this.structureGuiPointClouds.open());let i=new G(t,e,this);this.pointClouds[e]=i;let a=this.structureGuiPointClouds.addFolder(e);return i.initGui(this.structureGuiFields,a),this.scene.add(i.mesh),this.pickScene.add(i.pickMesh),i}deregisterSurfaceMesh(e){e in this.surfaceMeshes&&(this.structureGuiMeshes.removeFolder(e),this.surfaceMeshes[e].remove(),this.scene.remove(this.surfaceMeshes[e].mesh),delete this.surfaceMeshes[e])}deregisterCurveNetwork(e){e in this.curveNetworks&&(this.structureGuiCurveNetworks.removeFolder(e),this.curveNetworks[e].remove(),this.scene.remove(this.curveNetworks[e].mesh),delete this.curveNetworks[e])}clearAllStructures(){let e=Object.keys(this.surfaceMeshes);e.forEach((e=>{this.deregisterSurfaceMesh(e)})),e=Object.keys(this.curveNetworks),e.forEach((e=>{this.deregisterCurveNetwork(e)}))}initControls(){this.controls=new i.TrackballControls(this.camera,this.renderer.domElement),this.controls.rotateSpeed=5}clearDataFields(){document.getElementById("info-body-field-names").innerHTML="",document.getElementById("info-body-field-values").innerHTML=""}showDataField(e,t){let i=document.createElement("div");i.innerHTML=e,document.getElementById("info-body-field-names").appendChild(i);let a=document.createElement("div");a.innerHTML=t,document.getElementById("info-body-field-values").appendChild(a)}setDataHeader(e,t){document.getElementById("info-head-structure").innerHTML=e,document.getElementById("info-head-name").innerHTML=t}pick(e,t){const i=this.parent.getBoundingClientRect(),a=g(this.pickRenderer,this.pickScene,this.camera,e-i.left,t-i.top,i.width,i.height);a.structure&&a.structure.pickElement(a.localInd)}addEventListeners(){window.addEventListener("resize",this.onWindowResize.bind(this),!1),this.renderer.domElement.addEventListener("click",this.onMouseClick.bind(this),!1)}onWindowResize(){this.camera.aspect=this.parent.offsetWidth/this.parent.offsetHeight,this.camera.updateProjectionMatrix(),this.renderer.setSize(this.parent.offsetWidth,this.parent.offsetHeight),this.controls.handleResize(),this.render()}onMouseClick(e){e.clientX>=0&&e.clientX<=this.parent.offsetWidth&&e.clientY>=0&&e.clientY<=this.parent.offsetHeight&&this.pick(e.clientX,e.clientY)}animate(){requestAnimationFrame(function(){this.animate()}.bind(this)),this.userCallback(),this.controls&&this.controls.update(),this.render(),this.stats.update()}render(){let e=this.parent.offsetWidth;this.renderer.setViewport(0,0,e,this.parent.offsetHeight),this.renderer.setScissor(0,0,e,this.parent.offsetHeight),this.renderer.setScissorTest(!0),this.renderer.render(this.scene,this.camera)}message(e){let t=document.createElement("div"),i=document.getElementById("messages");i.insertBefore(t,i.firstChild),t.innerHTML=e}doneLoading(){document.getElementById("spinner").style.display="none"}prettyScalar(e){return e.toFixed(5)}prettyVector(e){return e[0]?"("+e[0].toFixed(2)+", "+e[1].toFixed(2)+", "+e[2].toFixed(2)+")":e.x?"("+e.x.toFixed(2)+", "+e.y.toFixed(2)+", "+e.z.toFixed(2)+")":void 0}listToVec(e){return new t.Vector3(e[0],e[1],e[2])}},Object.defineProperty(e,"__esModule",{value:!0})}));
